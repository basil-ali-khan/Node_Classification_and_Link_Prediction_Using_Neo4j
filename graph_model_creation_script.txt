// Indexes
CREATE INDEX publisher_name IF NOT EXISTS FOR (pub:Publisher) ON (pub.name);
CREATE INDEX journal_name IF NOT EXISTS FOR (j:Journal) ON (j.name);
CREATE INDEX paper_id IF NOT EXISTS FOR (p:Paper) ON (p.id);
CREATE INDEX topic_id IF NOT EXISTS FOR (t:Topic) ON (t.id);
CREATE INDEX author_id IF NOT EXISTS FOR (a:Author) ON (a.id);

// Publishers
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///journal.csv' AS row
  WITH row
  MERGE (pub:Publisher {name: row.`Journal Publisher`})
} IN TRANSACTIONS OF 1000 ROWS;

// Journals
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///journal.csv' AS row
  WITH row
  MERGE (j:Journal {name: row.`Journal Name`})
} IN TRANSACTIONS OF 1000 ROWS;

// PUBLISHED_BY (Journal to Publisher)
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///journal.csv' AS row
  WITH row
  MATCH (j:Journal {name: row.`Journal Name`})
  MATCH (pub:Publisher {name: row.`Journal Publisher`})
  MERGE (j)-[:PUBLISHED_BY]->(pub)
} IN TRANSACTIONS OF 1000 ROWS;

//papers
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///paper.csv' AS row
  WITH row
  MERGE (p:Paper {id: row.`Paper ID`})
  SET p.title = row.`Paper Title`,
      p.year = toInteger(row.`Paper Year`),
      p.doi = row.`Paper DOI`,
      p.journal_date = row.`Journal Date`,
      p.url = row.`Paper URL`,
      p.volume = row.`Journal Volume`,
      p.citation_count = toInteger(row.`Paper Citation Count`),
      p.field_of_study = row.`Field of Study`
} IN TRANSACTIONS OF 1000 ROWS;

// PUBLISHED_IN (Paper to Journal)
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///paper_journal.csv' AS row
  WITH row
  MATCH (p:Paper {id: row.`Paper ID`})
  MATCH (j:Journal {name: row.`Journal Name`})
  MERGE (p)-[:PUBLISHED_IN]->(j)
} IN TRANSACTIONS OF 1000 ROWS;

// Topics
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///topic.csv' AS row
  WITH row
  MERGE (t:Topic {id: row.`Topic ID`})
  SET t.name = row.`Topic Name`,
      t.url = row.`Topic URL`
} IN TRANSACTIONS OF 1000 ROWS;

// HAS_TOPIC (Paper to Topic)
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///paper_topic.csv' AS row
  WITH row
  MATCH (p:Paper {id: row.`Paper ID`})
  MATCH (t:Topic {id: row.`Topic ID`})
  MERGE (p)-[:HAS_TOPIC]->(t)
} IN TRANSACTIONS OF 1000 ROWS;

// CITES (Paper to Paper)
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///paper_reference.csv' AS row
  WITH row
  MATCH (p1:Paper {id: row.`Paper ID`})
  MATCH (p2:Paper {id: row.`Referenced Paper ID`})
  MERGE (p1)-[:CITES]->(p2)
} IN TRANSACTIONS OF 1000 ROWS;

// Authors
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///authors.csv' AS row
  WITH row
  MERGE (a:Author {id: row.`Author ID`})
  SET a.name = row.`Author Name`,
      a.url = row.`Author URL`
} IN TRANSACTIONS OF 1000 ROWS;

// WROTE (Author to Paper)
:auto
CALL {
  LOAD CSV WITH HEADERS FROM 'file:///author_paper.csv' AS row
  WITH row
  MATCH (a:Author {id: row.`Author ID`})
  MATCH (p:Paper {id: row.`Paper ID`})
  MERGE (a)-[:WROTE]->(p)
} IN TRANSACTIONS OF 1000 ROWS;

// Create CO_AUTHORED relationships
MATCH (a1:Author)-[:WROTE]->(p:Paper)<-[:WROTE]-(a2:Author)
WHERE a1.id < a2.id
MERGE (a1)-[r:CO_AUTHORED]->(a2)
SET r.collaboration_year = p.year;
New Relationships: WROTE (Author to Paper), CO_AUTHORED (Author to Author, with collaboration_year).


MATCH (a:Author)-[:WROTE]->(p:Paper)-[:HAS_TOPIC]->(t:Topic)
WITH a, t.name AS topic, COUNT(*) AS topic_count
ORDER BY topic_count DESC
WITH a, COLLECT(topic)[0] AS most_frequent_topic
SET a.research_domain = most_frequent_topic;

// Create unique Publisher nodes
MATCH (j:Journal)
WITH DISTINCT j.publisher AS publisher_name
WHERE publisher_name IS NOT NULL
CREATE (:Publisher {name: publisher_name});

MATCH (j:Journal)
WHERE j.publisher IS NOT NULL
MATCH (p:Publisher {name: j.publisher})
CREATE (j)-[:PUBLISHED_BY]->(p);

MATCH (j:Journal)
Remove j.publisher

// Since author_domain was string and GDS doesn't support string we created domain_id or an index which is mapped to each author_domain
MATCH (a:Author)
WHERE a.research_domain IS NOT NULL
WITH collect(DISTINCT a.research_domain) AS domains
UNWIND range(0, size(domains)-1) AS idx
WITH domains[idx] AS domain, idx AS domain_id
MATCH (a:Author {research_domain: domain})
SET a.domain_id = domain_id;


